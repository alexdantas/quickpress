#!/usr/bin/env ruby
#  ___    _     _   __    _     ___   ___   ____  __   __
# / / \  | | | | | / /`  | |_/ | |_) | |_) | |_  ( (` ( (`
# \_\_\\ \_\_/ |_| \_\_, |_| \ |_|   |_| \ |_|__ _)_) _)_)
#
# Command-line blog client for Wordpress.

require 'thor'
require 'quickpress'

# Command-line interface to quickpress' features.
#
# It uses `Thor` to implement commands on top of the
# `Quickpress` class. All the actual functionalities
# are there.
#
# Look out for `Thor`'s documentation to understand
# these domain-specific methods (like `desc`,
# `option` and such).
#
# @note Those `\x5` on the long descriptions are to force
#       a line break - think of them as `<br />`s.
#
class QuickpressCLI < Thor
  package_name "Quickpress"

  # Global `--debug` flag
  class_option(:debug,
               :desc => "debugging mode",
               :type => :boolean)

  class_option(:user,
               :desc => "Wordpress username",
               :aliases => "-u",
               :type => :string)

  class_option(:pass,
               :desc => "Wordpress password",
               :aliases => "-p",
               :type => :string)

  #  _      ____  _         ___   ___   __  _____
  # | |\ | | |_  \ \    /  | |_) / / \ ( (`  | |
  # |_| \| |_|__  \_\/\/   |_|   \_\_/ _)_)  |_|
  #
  desc('new-post [FILENAME]',
       'Creates a post on your Wordpress site')

  option('markup',
         :banner  => "NAME",
         :desc    => "markup language",
         :aliases => "-m",
         :type => :string)

  option('title',
         :desc    => "post title",
         :aliases => "-t",
         :type => :string)

  option('category',
         :desc    => "categories",
         :aliases => "-c",
         :type => :string)

  long_desc(<<-END).remove_starting!
    If FILENAME is given, will post it to your Wordpress site.

    If no FILENAME is set, will launch default text editor and
    \x5wait for you to write a post. After you save it, will post
    \x5that.

    The --categories option allows you to specify several of
    \x5them, just make sure they're comma-separated. For example:

    $ qp new-post file.md -t "My Title" -c "cat1, cat2, cat3"

    Notes:

    * Set default text editor with the `EDITOR` environment variable.

    * For a list of languages to use with --markup, do `qp markup-list`.

    * Unexisting categories will be created automatically.
  END

  def new_post(filename=nil)
    $options.merge! options

    Quickpress::new(:post, filename)
  end

  #  _     _   __  _____    ___   ___   __  _____  __
  # | |   | | ( (`  | |    | |_) / / \ ( (`  | |  ( (`
  # |_|__ |_| _)_)  |_|    |_|   \_\_/ _)_)  |_|  _)_)
  #
  desc('list-posts [COUNT]',
       'Shows last posts from Wordpress site')

  long_desc <<-END.remove_starting!
    If COUNT is given, will show last COUNT posts.

    If no COUNT is given, will show all posts.

    Notes:

    * Posts are shown in order of old first, recent last.
  END

  def list_posts(ammount=0)
    $options.merge! options

    Quickpress::list(:post, ammount.to_i)
  end

  #  ___   ____ _____  ____  _     ____    ___   ___   __  _____
  # | | \ | |_   | |  | |_  | |   | |_    | |_) / / \ ( (`  | |
  # |_|_/ |_|__  |_|  |_|__ |_|__ |_|__   |_|   \_\_/ _)_)  |_|
  #
  desc('delete-post ID',
       'Deletes post by ID')

  option('force',
         :type => :boolean,
         :desc    => "delete without confirming first",
         :aliases => "-f")

  long_desc(<<-END).remove_starting!
    Deletes the post with numerical id equal to ID.

    You can specify multiple IDs, just make sure to
    \x5keep them apart with commas. For example:

    $ qp delete-post "4,8,15,16,23,42"

    Notes:

    * To see IDs, use `qp list-posts`.
  END

  def delete_post(ids)
    $options.merge! options

    Quickpress::delete(:post, ids)
  end

  #  ____  ___   _  _____    ___   ___   __  _____
  # | |_  | | \ | |  | |    | |_) / / \ ( (`  | |
  # |_|__ |_|_/ |_|  |_|    |_|   \_\_/ _)_)  |_|
  #
  desc('edit-post ID [FILENAME]',
       'Edits post already on Wordpress site')

  option('markup',
         :banner  => "NAME",
         :desc    => "markup language",
         :aliases => "-m",
         :type => :string)

  option('title',
         :desc    => "post title",
         :aliases => "-t",
         :type => :string)

  option('category',
         :desc    => "categories",
         :aliases => "-c",
         :type => :string)

  option('force',
         :type => :boolean,
         :desc    => "upload even if no changes were made",
         :aliases => "-f")

  long_desc(<<-END).remove_starting!
    If FILENAME is given, will make the post with ID to
    \x5have the contents of that file.

    If no FILENAME is set, will launch your default text editor.
    \x5with current contents of the post. After saving it,
    \x5will post that.

    Quickpress compares the old content with the new.
    \x5If no changes were made, skips uploading.
    \x5If you want to do it anyway, use the --force (pun intended).

    You can specify title and categories just like in `new-post`.
    \x5Leave them blank to keep current values. For example:

    $ qp edit-post 666 file.md -t "" -c ""

    That would mantain the current title and categories.

    See `qp new-post`, same notes apply here.
  END

  def edit_post(id, filename=nil)
    $options.merge! options

    Quickpress::edit(:post, id.to_i, filename)
  end

  #  _      ____  _         ___    __    __    ____
  # | |\ | | |_  \ \    /  | |_)  / /\  / /`_ | |_
  # |_| \| |_|__  \_\/\/   |_|   /_/--\ \_\_/ |_|__
  #
  desc('new-page [FILENAME]',
       'Creates a page on your Wordpress site')

  option('markup',
         :banner  => "NAME",
         :desc    => "markup language",
         :aliases => "-m",
         :type => :string)

  option('title',
         :desc    => "page title",
         :aliases => "-t",
         :type => :string)

  long_desc <<-END.remove_starting!
    If FILENAME is given, will send it as a page to your
    \x5Wordpress site.

    If no FILENAME is set, will launch default text editor and
    \x5wait for you to write a page. After you save it, will send
    \x5that.

    Notes:

    * Set default text editor with the `EDITOR` environment variable.

    * For a list of languages to use with --markup, do `qp markup-list`.
  END

  def new_page(filename=nil)
    $options.merge! options

    Quickpress::new(:page, filename)
  end

  #  _     _   __  _____    ___    __    __    ____  __
  # | |   | | ( (`  | |    | |_)  / /\  / /`_ | |_  ( (`
  # |_|__ |_| _)_)  |_|    |_|   /_/--\ \_\_/ |_|__ _)_)
  #
  desc('list-pages [COUNT]',
       'Shows last pages from Wordpress site')

  long_desc <<-END.remove_starting!
    If COUNT is given, will show last COUNT pages.

    If no COUNT is given, will show all pages.

    Notes:

    * Pages are shown in order of old first, recent last.
  END

  def list_pages(ammount=0)
    $options.merge! options

    Quickpress::list(:page, ammount.to_i)
  end

  #  ___   ____  _     ____ _____  ____    ___    __    __    ____
  # | | \ | |_  | |   | |_   | |  | |_    | |_)  / /\  / /`_ | |_
  # |_|_/ |_|__ |_|__ |_|__  |_|  |_|__   |_|   /_/--\ \_\_/ |_|__
  #
  desc('delete-page ID',
       'Deletes page by ID')

  option('force',
         :type => :boolean,
         :desc    => "delete without confirming first",
         :aliases => "-f")

  long_desc(<<-END).remove_starting!
    Deletes the page with numerical id equal to ID.

    You can specify multiple IDs, just make sure to
    \x5keep them apart with commas. For example:

    $ qp delete-page "42,666,1337"

    Notes:

    * To see IDs, use `qp list-pages`.
  END

  def delete_page(ids)
    $options.merge! options

    Quickpress::delete(:page, ids)
  end

  #  ____  ___   _  _____    ___    __    __    ____
  # | |_  | | \ | |  | |    | |_)  / /\  / /`_ | |_
  # |_|__ |_|_/ |_|  |_|    |_|   /_/--\ \_\_/ |_|__
  #
  desc('edit-page ID [FILENAME]',
       'Edits page already on Wordpress site')

  option('markup',
         :banner  => "NAME",
         :desc    => "markup language",
         :aliases => "-m",
         :type => :string)

  option('title',
         :desc    => "page title",
         :aliases => "-t",
         :type => :string)

  option('force',
         :type => :boolean,
         :desc    => "upload even if no changes were made",
         :aliases => "-f")

  long_desc(<<-END).remove_starting!
    If FILENAME is given, will make the page with ID to
    \x5have the contents of that file.

    If no FILENAME is set, will launch your default text editor.
    \x5with current contents of the page. After saving it,
    \x5will send that.

    Quickpress compares the old content with the new.
    \x5If no changes were made, skips uploading.
    \x5If you want to do it anyway, use the --force (pun intended).

    You can specify the title just like in `new-page`.
    \x5Leave it blank to keep current value. For example:

    $ qp edit-page 666 file.md -t ""

    That would mantain the current title.

    See `new-page`, same notes there apply here.
  END

  def edit_page(id, filename=nil)
    $options.merge! options

    Quickpress::edit(:page, id.to_i, filename)
  end

  #  _      ____  _         __   _  _____  ____
  # | |\ | | |_  \ \    /  ( (` | |  | |  | |_
  # |_| \| |_|__  \_\/\/   _)_) |_|  |_|  |_|__
  #
  desc('new-site [ADDRESS]',
       'Starts managing a Wordpress site.')

  long_desc <<-END.remove_starting!
    If ADDRESS is provided, add it to quickpress.

    If not, asks you for it. If everything's correct,
    \x5will add that site to quickpress.

    By "adding" we mean you'll be able to do all commands on it.

    Notes:

    * To see all sites added to quickpress, see `qp list-sites`.

    * To see all possible commands, simply use `qp`.
  END

  def new_site(address=nil)
    $options.merge! options

    Quickpress::new_site address
  end

  #  _     _   __  _____    __   _  _____  ____  __
  # | |   | | ( (`  | |    ( (` | |  | |  | |_  ( (`
  # |_|__ |_| _)_)  |_|    _)_) |_|  |_|  |_|__ _)_)
  #
  desc('list-sites',
       'Shows all sites currently added to quickpress')

  long_desc <<-END.remove_starting!
    Will list all sites you've added with `qp new-site`.

    They'll each have an id next to them. It is used by both
    \x5`use-site` and `forget-site`.
  END

  def list_sites
    $options.merge! options

    Quickpress::list_sites
  end

  #  ____  ___   ___   __    ____ _____    __   _  _____  ____
  # | |_  / / \ | |_) / /`_ | |_   | |    ( (` | |  | |  | |_
  # |_|   \_\_/ |_| \ \_\_/ |_|__  |_|    _)_) |_|  |_|  |_|__
  #
  desc('forget-site ID',
       'Forgets site with ID')

  option('force',
         :type => :boolean,
         :desc    => "forget without confirming first",
         :aliases => "-f")

  long_desc(<<-END).remove_starting!
    Makes quickpress stop managing the site with numerical
    \x5id equal to ID.

    You can specify multiple IDs, just make sure to
    \x5keep them apart with commas. For example:

    $ qp forget-site "11,24,69"

    Notes:

    * To see IDs, use `qp list-sites`.

    * It doesn't do anything to the blog, don't worry
  END

  def forget_site ids
    $options.merge! options

    Quickpress::forget_site(ids)
  end

  #  _     __   ____    __   _  _____  ____
  # | | | ( (` | |_    ( (` | |  | |  | |_
  # \_\_/ _)_) |_|__   _)_) |_|  |_|  |_|__
  #
  desc('use-site ID',
       'Sets site with ID as default')

  long_desc(<<-END).remove_starting!
    From now on, all commands will affect the site with numerical ID.

    Notes:

    * To see IDs, use `qp list-sites`.
  END

  def use_site id
    $options.merge! options

    Quickpress::use_site(id.to_i)
  end

  #  _     _   __  _____    _       __    ___   _     _     ___
  # | |   | | ( (`  | |    | |\/|  / /\  | |_) | |_/ | | | | |_)
  # |_|__ |_| _)_)  |_|    |_|  | /_/--\ |_| \ |_| \ \_\_/ |_|
  #
  desc('list-markup',
       'Show all supported templating languages')

  long_desc(<<-END).remove_starting!
    Lists all templating languages supported by quickpress,
    \x5together with their file extensions.

    You can use them with the --markup option when creating
    \x5new posts or pages.

    $ qp new-post --markup asciidoc


    Notes:

    * When you create a post/page using a file, the markup is implied by the filename extension.
  END

  def list_markup
    $options.merge! options

    Quickpress::list_markup
  end

  #  _     _   __  _____    __     __   _____  ____  __
  # | |   | | ( (`  | |    / /`   / /\   | |  | |_  / /`_  __
  # |_|__ |_| _)_)  |_|    \_\_, /_/--\  |_|  |_|__ \_\_/ (_()
  #
  desc('list-categories',
       'Shows all posts\' categories on the Wordpress site')

  long_desc <<-END.remove_starting!
    Simply lists all existing categories withing the site.
  END

  def list_categories
    $options.merge! options

    Quickpress::list_categories
  end

  #  _     _   __  _____    ___   ___  _____  _   ___   _      __
  # | |   | | ( (`  | |    / / \ | |_)  | |  | | / / \ | |\ | ( (`
  # |_|__ |_| _)_)  |_|    \_\_/ |_|    |_|  |_| \_\_/ |_| \| _)_)
  #
  desc('list-options',
       'Dumps all Wordpress options of the site')

  long_desc <<-END.remove_starting!
    Lists settings of the Wordpress site, along with their current
    \x5values.

    There's a lot of them, all explained here:
    \x5http://codex.wordpress.org/Option_Reference
  END

  def list_options
    $options.merge! options

    Quickpress::list_options
  end

  #  _     _   __  _____    _     __   ____  ___   __
  # | |   | | ( (`  | |    | | | ( (` | |_  | |_) ( (`
  # |_|__ |_| _)_)  |_|    \_\_/ _)_) |_|__ |_| \ _)_)
  #
  desc('list-users',
       'Shows all users on the site')

  long_desc <<-END.remove_starting!
    Lists all users currently registered on the site, along with
    \x5their personal info :)
  END

  def list_users
    $options.merge! options

    Quickpress::list_users
  end

  #  __  _____   __   _____  _     __     __    ___   _
  # ( (`  | |   / /\   | |  | | | ( (`   / /`  / / \ | |\/|  __
  # _)_)  |_|  /_/--\  |_|  \_\_/ _)_)   \_\_, \_\_/ |_|  | (_()
  #
  desc('status-comments',
       'Shows comment count according to their status')

  long_desc <<-END.remove_starting!
    Shows how many comments were:

    - Approved
    \x5- Awaiting Moderation
    \x5- Marked as Spam
    \x5- Created on Total
  END

  def status_comments
    $options.merge! options

    Quickpress::status_comments
  end

  #  __  _____   __   _____  _     __     __     __   _____
  # ( (`  | |   / /\   | |  | | | ( (`   / /`   / /\   | |   __
  # _)_)  |_|  /_/--\  |_|  \_\_/ _)_)   \_\_, /_/--\  |_|  (_()
  #
  desc('status-categories',
       'Shows post count according to each category')

  option('non-empty',
         :desc    => "don't show categories without posts",
         :aliases => "-n",
         :type => :boolean)

  long_desc <<-END.remove_starting!
    Shows every existing category along with how many
    \x5posts were made on them.
  END

  def status_categories
    $options.merge! options

    Quickpress::status_categories
  end

  #  ___    ___
  # / / \  | |_)
  # \_\_\\ |_|
  #
  # Overriding default message when user specify no arguments.
  no_commands {
  def self.qp
    puts <<-END.remove_starting!
      quickpress v#{Quickpress::VERSION}
      Usage:
      	qp COMMAND [OPTIONS]

      Quickpress works with commands, just like `git(1)` or `bundle(1)`.
      Here's a list with all of them:

    END

    # Will get all commands and pretty-print them into
    # columns.
    all = QuickpressCLI
      .all_tasks                       # internal Thor method
      .to_a.sort
      .map { |c| c[0] }                # only need their names

    all = all
      .map { |c| c.gsub(/_/, '-') }    # replacing '_' with '-'
      .each_slice(4)                   # splitting into columns
      .to_a

    Thor::Shell::Basic.new.print_table all

    puts <<-END.remove_starting!

      Use `qp help` to show most used commands and their basic description.
      Use `qp help <command>` to get more info on a specific command.

      Config directory: `~/.config/quickpress/`

      Homepage: http://quickpress.alexdantas.net
      Contact:  Alexandre Dantas <eu@alexdantas.net>

      This software is licensed under the GNU General Public License
      version 3 or later.
    END
  end
  #  _     ____  _     ___
  # | |_| | |_  | |   | |_)
  # |_| | |_|__ |_|__ |_|
  #
  # Overriding default help message - shell and subcommands
  # are Thor's internals.
  def self.show_help

    puts <<-END
quickpress v#{Quickpress::VERSION}
The most commonly used commands are:

  qp new-site        # Starts managing a new Wordpress site
  qp use-site        # Sets site to manage from now on
  qp new-post        # Creates a post on your Wordpress site
  qp list-posts      # Shows last posts from Wordpress site
  qp delete-post     # Deletes post by numerical ID
  qp edit-post       # Edits post already on Wordpress site
  qp list-markup     # Show formats on which you can write posts
  qp status-comments # Display comment count according to status

Here's some examples:

  # Uploads post within `file.md` (Markdown) with
  # title and categories
  qp new-post file.md -t "Title" -c "Cat1, Cat2"

  # Uploads page within `file.adoc` (Asciidoc) with
  # username and password
  qp new-page file.adoc -u username -p password

  # Calls your default text editor with the contents of
  # the post of id 12. After you save, uploads the changes.
  qp edit-post 12

Use `qp` to show all commands and program info.
Use `qp help <command>` for info on a specific command.
    END
  end}

end

#  ___   ____  __    _   _
# | |_) | |_  / /`_ | | | |\ |
# |_|_) |_|__ \_\_/ |_| |_| \|
#
begin
  if ARGV.empty?
    QuickpressCLI.qp
    exit

  elsif (ARGV.size == 1) and (ARGV.last == "help")
    QuickpressCLI.show_help
    exit
  end

  Quickpress::config_init

  QuickpressCLI.start ARGV

  # Real mess of error-handling.
  # I wonder if there's a better way to do it.
  #
  # Well, at least I'm not polluting the whole code
  # with this `rescue` stuff.

rescue XMLRPC::FaultException => e
  if e.message =~ /Incorrect username or password/

    $stderr.puts <<-END.remove_starting!

      * Incorrect username or password.
    END

  else
    $stderr.puts
    $stderr.puts e.message
    $stderr.puts e.backtrace if $options[:debug]
  end
  exit 666

# Ruby 1.9.x don't have Net::ReadTimeout - spits out a NameError
rescue Net.const_defined?(:ReadTimeout) ? Net::ReadTimeout : EOFError
  $stderr.puts <<-END.remove_starting!

    * Connection took too long.
      Check your internet settings and try again.
  END
  exit 666
  
rescue ArgumentError => arg
  if arg.message =~ /Wrong protocol specified/
    $stderr.puts <<-END.remove_starting!
          * Wrong protocol at Wordpress site.
            Please use `http` or `https`.
        END
    exit 666
  else
    $stderr.puts arg.backtrace if $options[:debug]
  end

rescue Interrupt => i
  $stderr.puts
  $stderr.puts "* You've interrupted me, mate"

  $stderr.puts i.backtrace if $options[:debug]
  exit 666

rescue LoadError => l
  $stderr.puts <<-END.remove_starting!

    * Couldn't load '#{l.path}'.
      Make sure it's gem is installed and try again.
  END
  exit 666

rescue StandardError => e

  if e.message =~ /Wrong content-type/
    $stderr.puts <<-END.remove_starting!
          * This doesn't seem to be a Wordpress site.
            Check the address again.
        END
    exit 666

  elsif e.message =~ /Name or service not known/
    $stderr.puts <<-END.remove_starting!

      * Connection error!
        Either site doesn't exist or there's
        something wrong with your internet connection.
    END

    if Quickpress::CLI::ask("Wanna retry?")
      puts
      retry
    end
    exit 666
  end

  $stderr.puts e
  $stderr.puts e.message
  $stderr.puts e.backtrace if $options[:debug]
  exit 666
end

