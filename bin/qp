#!/usr/bin/env ruby
#  ___    _     _   __    _     ___   ___   ____  __   __
# / / \  | | | | | / /`  | |_/ | |_) | |_) | |_  ( (` ( (`
# \_\_\\ \_\_/ |_| \_\_, |_| \ |_|   |_| \ |_|__ _)_) _)_)

require 'thor'
require 'quickpress'

# Command line interface above the `Quickpress` class.
#
class QP < Thor

  # Global `--debug` flag
  class_option(:debug,
               :desc => "debugging mode",
               :type => :boolean)

  #  _      ____  _         ___   ___   __  _____
  # | |\ | | |_  \ \    /  | |_) / / \ ( (`  | |
  # |_| \| |_|__  \_\/\/   |_|   \_\_/ _)_)  |_|
  #
  desc('new-post [FILENAME]',
       'Creates a post on your Wordpress site')

  option('markup',
         :banner  => "name",
         :desc    => "markup language",
         :aliases => "-m")

  long_desc(<<-END).remove_starting!
    If FILENAME is given, will post it to your Wordpress site.

    If no FILENAME is set, will launch default text editor and
    \x5wait for you to write a post. After you save it, will post
    \x5that.

    * Set default text editor with the `EDITOR` environment
    \x5variable.
    \x5* For a list of markup languages, do `qp markup-list`.
  END

  def new_post(filename=nil)
    $options[:debug] = options[:debug]
    $options[:markup] = options[:markup]

    Quickpress::new(:post, filename)
  end

  #  _     _   __  _____    ___   ___   __  _____  __
  # | |   | | ( (`  | |    | |_) / / \ ( (`  | |  ( (`
  # |_|__ |_| _)_)  |_|    |_|   \_\_/ _)_)  |_|  _)_)
  #
  desc('list-posts [COUNT]',
       'Shows last posts from Wordpress site')

  long_desc <<-END.remove_starting!
    If COUNT is given, will show last COUNT posts,
    \x5most recent first.

    If no COUNT is given, will show all posts.
  END

  def list_posts(ammount=0)
    $options[:debug] = options[:debug]
    Quickpress::list(:post, ammount.to_i)
  end

  #  ___   ____ _____  ____  _     ____    ___   ___   __  _____
  # | | \ | |_   | |  | |_  | |   | |_    | |_) / / \ ( (`  | |
  # |_|_/ |_|__  |_|  |_|__ |_|__ |_|__   |_|   \_\_/ _)_)  |_|
  #
  desc('delete-post ID',
       'Deletes post by ID')

  long_desc(<<-END).remove_starting!
    Deletes the post with numerical id equal to ID.

    To see IDs, use `qp list-posts`.

    You can specify multiple IDs, just make sure to
    \x5keep them apart with commas.

    For example:

    > $ qp delete-post "4,8,15,16,23,42"

    If the post doesn't exist, do nothing.
  END

  def delete_post(ids)
    $options[:debug] = options[:debug]
    Quickpress::delete(:post, ids)
  end

  #  _      ____  _         ___    __    __    ____
  # | |\ | | |_  \ \    /  | |_)  / /\  / /`_ | |_
  # |_| \| |_|__  \_\/\/   |_|   /_/--\ \_\_/ |_|__
  #
  desc('new-page [FILENAME]',
       'Creates a page on your Wordpress site')

  option('markup',
         :banner  => "name",
         :desc    => "markup language",
         :aliases => "-m")

  long_desc <<-END.remove_starting!
    If FILENAME is given, will send it as a page to your
    \x5Wordpress site.

    If no FILENAME is set, will launch default text editor and
    \x5wait for you to write a page. After you save it, will send
    \x5that.

    * Set default text editor with the `EDITOR` environment
    \x5  variable.
    \x5* For a list of markup languages, do `qp markup-list`.
  END

  def new_page(filename=nil)
    $options[:debug] = options[:debug]
    $options[:markup] = options[:markup]

    Quickpress::new(:page, filename)
  end

  #  _     _   __  _____    ___    __    __    ____  __
  # | |   | | ( (`  | |    | |_)  / /\  / /`_ | |_  ( (`
  # |_|__ |_| _)_)  |_|    |_|   /_/--\ \_\_/ |_|__ _)_)
  #
  desc('list-pages [COUNT]',
       'Shows last pages from Wordpress site')

  long_desc <<-END.remove_starting!
    If COUNT is given, will show last COUNT pages,
    \x5most recent first.

    If no COUNT is given, will show all pages.
  END

  def list_pages(ammount=0)
    $options[:debug] = options[:debug]
    Quickpress::list(:page, ammount.to_i)
  end

  #  ___   ____  _     ____ _____  ____    ___    __    __    ____
  # | | \ | |_  | |   | |_   | |  | |_    | |_)  / /\  / /`_ | |_
  # |_|_/ |_|__ |_|__ |_|__  |_|  |_|__   |_|   /_/--\ \_\_/ |_|__
  #
  desc('delete-page ID',
       'Deletes page by ID')

  long_desc(<<-END).remove_starting!
    Deletes the page with numerical id equal to ID.

    To see IDs, use `qp list-pages`.

    You can specify multiple IDs, just make sure to
    \x5keep them apart with commas.
    \x5For example:

    > $ qp delete-page "42,666,1337"

    If the page doesn't exist, do nothing.
  END

  def delete_page(ids)
    $options[:debug] = options[:debug]
    Quickpress::delete(:page, ids)
  end

  #  _      ____  _         __   _  _____  ____
  # | |\ | | |_  \ \    /  ( (` | |  | |  | |_
  # |_| \| |_|__  \_\/\/   _)_) |_|  |_|  |_|__
  #
  desc('new-site',
       'Starts managing a Wordpress site.')

  long_desc <<-END.remove_starting!
    Will prompt you for an address, username and password.
    \x5If everything's correct, will add that site to quickpress.

    By adding we mean you'll be able to do all commands on it.

    To see all sites added to quickpress, see `qp list-sites`.
  END

  def new_site
    $options[:debug] = options[:debug]
    Quickpress::new_site
  end

  #  _     _   __  _____    __   _  _____  ____  __
  # | |   | | ( (`  | |    ( (` | |  | |  | |_  ( (`
  # |_|__ |_| _)_)  |_|    _)_) |_|  |_|  |_|__ _)_)
  #
  desc('list-sites',
       'Shows all sites currently added to quickpress')

  long_desc <<-END.remove_starting!
    Will list all sites you've added with `qp new-site`.
    \x5If no COUNT is given, will show all pages.
  END

  def list_sites
    $options[:debug] = options[:debug]
    Quickpress::list_sites
  end

  #  ___   ____  _     ____ _____  ____    __   _  _____  ____
  # | | \ | |_  | |   | |_   | |  | |_    ( (` | |  | |  | |_
  # |_|_/ |_|__ |_|__ |_|__  |_|  |_|__   _)_) |_|  |_|  |_|__
  #
  desc('delete-site ID',
       'Deletes site by ID')

  long_desc(<<-END).remove_starting!
    Deletes the site with numerical id equal to ID.

    To see IDs, use `qp list-sites`.

    You can specify multiple IDs, just make sure to
    \x5keep them apart with commas.
    \x5For example:

    > $ qp delete-site "11,24,69"
  END

  def delete_site(ids)
    $options[:debug] = options[:debug]
    Quickpress::delete_site(ids)
  end

  #  _     __   ____    __   _  _____  ____
  # | | | ( (` | |_    ( (` | |  | |  | |_
  # \_\_/ _)_) |_|__   _)_) |_|  |_|  |_|__
  #
  desc('use-site ID',
       'Sets site with ID as default')

  long_desc(<<-END).remove_starting!
    From now on will do actions on the site with numerical
    \x5id equal to ID.

    To see IDs, use `qp list-sites`.
  END

  def use_site id
    $options[:debug] = options[:debug]
    Quickpress::use_site(id.to_i)
  end

  #  _     _   __  _____    _       __    ___   _     _     ___
  # | |   | | ( (`  | |    | |\/|  / /\  | |_) | |_/ | | | | |_)
  # |_|__ |_| _)_)  |_|    |_|  | /_/--\ |_| \ |_| \ \_\_/ |_|
  #
  desc('list-markup',
       'Show all supported templating languages')

  long_desc(<<-END).remove_starting!
    Lists all templating languages supported by quickpress.

    You can use them with the `--markup` option when creating
    \x5new posts or pages.

    > $ qp new-post --markup asciidoc

    If you create a post/page with a file, they're implied
    \x5based on it's filename extension.

    > $ qp new-post filename.asciidoc
  END

  def list_markup
    puts "Name (file extension)"
    puts

    Quickpress::supported_markup.each do |m|
      puts "* #{m[0]} (#{m[1]})"
    end
  end

end

#  ___   ____  __    _   _
# | |_) | |_  / /`_ | | | |\ |
# |_|_) |_|__ \_\_/ |_| |_| \|
#
begin
  if ARGV.empty?
    puts <<-END.remove_starting!
      quickpress v#{Quickpress::VERSION}
      Cheatsheet:

      	$ qp {new,delete}-{post,page,site}
      	$ qp list-(post|page)s

      Use `qp help` to see all commands.
      Also, try `qp help (command)`.

      Config file stored at '~/.config/quickpress/'
    END
    exit
  end

  Quickpress::config_init
  QP.start ARGV

  # Real mess of error-handling.
  # I wonder if there's a better way to do it.
  #
  # Well, at least I'm not polluting the whole code
  # with this `rescue` stuff.

rescue Net::ReadTimeout
  $stderr.puts <<-END.remove_starting!

    * Connection took too long.
      Check your internet settings and try again.
  END
  exit 666

rescue XMLRPC::FaultException => e
  if e.message =~ /Incorrect username or password/

    $stderr.puts <<-END.remove_starting!

      * Incorrect username or password.
    END

  else
    $stderr.puts
    $stderr.puts e.message
  end
  exit 666

rescue ArgumentError => arg
  if arg.message =~ /Wrong protocol specified/
    $stderr.puts <<-END.remove_starting!
          * Wrong protocol at Wordpress site.
            Please use `http` or `https`.
        END
    exit 666
  end

rescue Interrupt => i
  $stderr.puts
  $stderr.puts "* You've interrupted me, mate"

  $stderr.puts i.backtrace if $options[:debug]
  exit 666

rescue StandardError => e

  if e.message =~ /Wrong content-type/
    $stderr.puts <<-END.remove_starting!
          * This doesn't seem to be a Wordpress site.
            Check the address again.
        END
    exit 666

  elsif e.message =~ /Name or service not known/
    $stderr.puts <<-END.remove_starting!

      * Connection error!
        Either site doesn't exist or there's
        something wrong with your internet connection.
    END

    if Quickpress::CLI::ask("Wanna retry?")
      puts
      retry
    end
    exit 666
  end

  $stderr.puts e
  $stderr.puts e.message
  $stderr.puts e.backtrace if $options[:debug]
  exit 666
end

